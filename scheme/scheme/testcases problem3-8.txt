Assignment: Project 4: A Scheme Interpreter
OK, version v1.10.0
=====================================================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unlocking tests

At each "? ", type what you would expect the output to be.
Type exit() to quit

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 1
(cases remaining: 5)

>>> from scheme import *
>>> global_frame = create_global_frame()
>>> global_frame.define("x", 3)
>>> global_frame.parent is None


? True
-- OK! --

>>> global_frame.lookup("x")
? 3
-- OK! --

>>> global_frame.define("x", 2)
>>> global_frame.lookup("x")
? 2
-- OK! --

>>> global_frame.lookup("foo")
Choose the number of the correct choice:
0) None
1) SchemeError
2) 3

? 1
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 2
(cases remaining: 4)

>>> from scheme import *
>>> first_frame = create_global_frame()
>>> first_frame.define("x", 3)
>>> second_frame = Frame(first_frame)
>>> second_frame.parent == first_frame
? True
-- OK! --

>>> second_frame.lookup("x")
? 3
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 3
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 4
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 3 > Suite 2 > Case 1
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 3 unlocked.


---------------------------------------------------------------------
Question 4 > Suite 1 > Case 1
(cases remaining: 4)

>>> from scheme import *
>>> env = create_global_frame()
>>> twos = Pair(2, Pair(2, nil))
>>> plus = PrimitiveProcedure(scheme_add) # + procedure
>>> scheme_apply(plus, twos, env)
Choose the number of the correct choice:

0) 4
1) SchemeError
? 4
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 2
(cases remaining: 3)

>>> from scheme import *
>>> env = create_global_frame()
>>> twos = Pair(2, Pair(2, nil))
>>> oddp = PrimitiveProcedure(scheme_oddp) # odd? procedure
>>> scheme_apply(oddp, twos, env)
Choose the number of the correct choice:
0) True
1) SchemeError
2) False
? 1
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 3
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 4
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 4 unlocked.


Assignment: Project 4: A Scheme Interpreter
OK, version v1.10.0
=====================================================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unlocking tests

At each "? ", type what you would expect the output to be.
Type exit() to quit

---------------------------------------------------------------------
Question 5 > Suite 1 > Case 1
(cases remaining: 4)

>>> from scheme_reader import *
>>> from scheme import *
>>> expr = read_line('(+ 2 2)')
>>> expr
? Pair('+', Pair(2, Pair(2, nil)))
-- OK! --

>>> scheme_eval(expr, create_global_frame()) # Type SchemeError if you think this errors
? 4
-- OK! --

>>> expr = read_line('(+ (+ 2 2) (+ 1 3) (* 1 4))')
>>> scheme_eval(expr, create_global_frame()) # Type SchemeError if you think this errors
? 12
-- OK! --

>>> expr = read_line('(yolo)')
>>> scheme_eval(expr, create_global_frame()) # Type SchemeError if you think this errors
? SchemeError
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 2 > Case 1
(cases remaining: 3)


scm> (+ 2 3) ; Type SchemeError if you think this errors
? 5
-- OK! --

scm> (* (+ 3 2) (+ 1 7)) ; Type SchemeError if you think this errors
? 40
-- OK! --

scm> (1 2) ; Type SchemeError if you think this errors
? SchemeError
-- OK! --

scm> (1 (print 0)) ; check_procedure should be called before operands are evaluated
? SchemeError
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 2 > Case 2
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 5 > Suite 2 > Case 3
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 5 unlocked.

 Question 6 > Suite 1 > Case 1
(cases remaining: 6)

Q: What is the structure of the expressions argument to do_define_form?
Choose the number of the correct choice:
0) Pair(A, Pair(B, nil)), where:
       A is the symbol being bound,
       B is an expression whose value should be bound to A
1) Pair(A, B), where:
       A is the symbol being bound,
       B is an expression whose value should be bound to A
2) Pair('define', Pair(A, Pair(B, nil))), where:
       A is the symbol being bound,
       B is an expression whose value should be bound to A
3) Pair(A, B), where:
       A is the symbol being bound,
       B is the value that should be bound to A
4) Pair(A, Pair(B, nil)), where:
       A is the symbol being bound,
       B is the value that should be bound to A
? 0
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 1 > Case 2
(cases remaining: 5)

Q: What method of a Frame instance will bind


Choose the number of the correct choice:
0) make_child_frame
1) bindings
2) define
3) lookup
? 2
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 2 > Case 1
(cases remaining: 4)


scm> (define size 2)
? 2
-- Not quite. Try again! --

? size
-- OK! --

scm> size
? 2
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 2 > Case 2
(cases remaining: 3)


scm> (define x (+ 2 3))
? x
-- OK! --

scm> x
? 5
-- OK! --

scm> (define x (+ 2 7))
? x
-- OK! --

scm> x
? 9
-- OK! --

scm> (eval (define tau 6.28))


? 6.28
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 2 > Case 3
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 6 > Suite 2 > Case 4
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 6 unlocked.



Unlocking tests

At each "? ", type what you would expect the output to be.
Type exit() to quit

---------------------------------------------------------------------
Question 7 > Suite 1 > Case 1
(cases remaining: 6)

Q: What is the structure of the expressions argument to do_quote_form?
Choose the number of the correct choice:
0) Pair('quote', Pair(A, nil)), where:
       A is the quoted expression
1) Pair(A, nil), where:
       A is the quoted expression
2) A, where:
       A is the quoted expression
3) [A], where:
       A is the quoted expression
? 1
-- OK! --

---------------------------------------------------------------------
Question 7 > Suite 2 > Case 1
(cases remaining: 5)


scm> (quote hello)
? hello
-- OK! --

scm> 'hello
? hello
-- OK! --

scm> ''hello
Choose the number of the correct choice:
0) (quote hello)
1) hello
2) (hello)
3) (quote (quote (hello)))
? 0
-- OK! --

scm> (quote (1 2))
? (1 2)
-- OK! --

scm> '(1 2)
? (1 2)
-- OK! --

scm> (quote (1 . 2))
? (1 . 2)
-- OK! --

scm> '(1 . (2))

? (1 2)
-- OK! --

scm> (car '(1 2 3))
? 1
-- OK! --

scm> (cdr '(1 2))


? (2)
-- OK! --

scm> (car (car '((1))))
? 1
-- OK! --

scm> (quote 3)
? 3
-- OK! --

scm> (eval (cons 'car '('(4 2))))
? 4
-- OK! --

Question 7 > Suite 3 > Case 1
(cases remaining: 4)

>>> from scheme_reader import *
>>> read_line(" (quote x) ")

? Pair('quote', Pair('x', nil))
-- OK! --

>>> read_line(" 'x ")
Choose the number of the correct choice:
0) Pair('x', nil)
1) Pair('quote', Pair('x', nil))
2) Pair('quote', 'x')
3) 'x'
? 1
-- OK! --

>>> read_line(" (a b) ")


Choose the number of the correct choice:
0) Pair('quote', Pair(Pair('a', Pair('b', nil)), nil))
1) Pair('a', Pair('b', nil))
2) Pair('quote', Pair('a', 'b'))
3) Pair('quote', Pair('a', Pair('b', nil)))
? 1
-- OK! --

>>> read_line(" '(a b) ")
Choose the number of the correct choice:


Choose the number of the correct choice:
0) Pair('quote', Pair('a', Pair('b', nil)))
1) Pair('quote', Pair('a', 'b'))
2) Pair('quote', Pair(Pair('a', Pair('b', nil)), nil))
3) Pair('a', Pair('b', nil))
? 2
-- OK! --

>>> read_line(" '((a)) ")

Choose the number of the correct choice:
0) Pair('quote', Pair(Pair('a', nil), nil))
1) Pair('quote', Pair(Pair('a', nil), nil), nil)
2) Pair('quote', Pair(Pair(Pair('a', nil), nil), nil))
3) Pair('quote', Pair(Pair('a'), nil))
4) Pair('quote', Pair(Pair('a'), nil), nil)
? 2
-- OK! --



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unlocking tests

At each "? ", type what you would expect the output to be.
Type exit() to quit

---------------------------------------------------------------------
Question 8 > Suite 1 > Case 1
(cases remaining: 6)

>>> from scheme import *
>>> env = create_global_frame()
>>> eval_all(Pair(2, nil), env)
? 2
-- OK! --

>>> eval_all(Pair(4, Pair(5, nil)), env)


? 5
-- OK! --

>>> eval_all(nil, env) # return None (meaning undefined)
---------------------------------------------------------------------
Question 8 > Suite 1 > Case 2
(cases remaining: 5)

-- Already unlocked --

---------------------------------------------------------------------
Question 8 > Suite 2 > Case 1
(cases remaining: 4)


scm> (begin (+ 2 3) (+ 5 6))
? 11
-- OK! --

scm> (begin (define x 3) x)

? 3
-- OK! --

---------------------------------------------------------------------
Question 8 > Suite 2 > Case 2
(cases remaining: 3)


scm> (begin 30 '(+ 2 2))


Choose the number of the correct choice:
0) 30
1) '(+ 2 2)
2) (+ 2 2)
3) 4
? 2
-- OK! --

scm> (define x 0)
? x
-- OK! --

scm> (begin 42 (define x (+ x 1)))


? x
-- OK! --

scm> x


? 1
-- OK! --

---------------------------------------------------------------------
Question 8 > Suite 2 > Case 3
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 8 > Suite 2 > Case 4
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 8 unlocked.

