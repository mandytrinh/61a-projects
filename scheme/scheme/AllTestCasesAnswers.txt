You are running version v1.3.0 of ok.py
######################################
Unlocking tests for cal/61A/fa14/proj4
######################################
test2
At each "? ", type in what you would expect the output to be.
Type exit() to quit
Unlocking tests for q01
=======================

Case 2
------
>>> read_line("'x")
Choose the number of the correct choice:
0) 'x'
1) Pair('quote', Pair('x', nil))
2) Pair('x', nil)
3) Pair('quote', 'x')
? 1
OK!
>>> read_line("(quote x)")
Choose the number of the correct choice:
0) Pair('quote', 'x')
1) Pair('x', nil)
2) Pair('quote', Pair('x', nil))
3) 'x'
? 2
OK!
>>> read_line("'(a b)")

Choose the number of the correct choice:
0) Pair('a', Pair('b', nil))
1) Pair('quote', Pair(Pair('a', Pair('b', nil)), nil))
2) Pair('quote', Pair('a', Pair('b', nil)))
3) Pair('quote', Pair('a', 'b'))
? 1
OK!
>>> read_line("'((a))")
Choose the number of the correct choice:
0) Pair('quote', Pair(Pair('a', nil), nil))
1) Pair('quote', Pair(Pair('a', nil), nil), nil)
2) Pair('quote', Pair(Pair('a'), nil))
3) Pair('quote', Pair(Pair(Pair('a', nil), nil), nil))
4) Pair('quote', Pair(Pair('a'), nil), nil)
? 3
OK!
-- Congratulations, you unlocked this case! --

You are done unlocking tests for this question!


$ python ok -q 2 -u --local
You are running version v1.3.0 of ok.py
######################################
Unlocking tests for cal/61A/fa14/proj4
######################################

At each "? ", type in what you would expect the output to be.
Type exit() to quit
Unlocking tests for q02
=======================

Case 1
------
>>> read_line("(a . b)")


Choose the number of the correct choice:
0) Pair('a', 'b')
1) Pair('a', Pair('b', nil))
2) Pair('a', 'b', nil)
3) Pair('a', Pair('b'))
4) SyntaxError
? 0
OK!
>>> read_line("(a b . c)")
Choose the number of the correct choice:
0) SyntaxError
1) Pair('a', 'b', 'c')
2) Pair('a', Pair('b', 'c'))
3) Pair('a', Pair('b', Pair('c')))
4) Pair('a', Pair('b', Pair('c', nil)))
? 2
OK!
-- Congratulations, you unlocked this case! --

Case 2
------
>>> read_line("(a b . c d)")
Choose the number of the correct choice:
0) SyntaxError
1) Pair('a', Pair('b', Pair('c', 'd')))
2) Pair('a', Pair('b', 'c'))
3) Pair('a', Pair('b', Pair('c', Pair('d', nil))))
? 0
OK!
>>> read_line("(a . (b . (c . ())))")


Choose the number of the correct choice:
0) Pair('a', Pair('b', Pair('c', nil)))
1) Pair('a', Pair('b', Pair('c', Pair(nil, nil))))
2) Pair('a', 'b', 'c')
3) SyntaxError
? 0
OK!
>>> read_line("(a . ((b . (c)))))")
Choose the number of the correct choice:
0) Pair('a', Pair(Pair('b', Pair('c', nil)), nil))
1) Pair('a', Pair('b', Pair('c', nil)), nil)
2) Pair('a', Pair(Pair('b', Pair('c', nil)), nil), nil)
3) Pair('a', Pair('b', Pair('c')), nil)
? 0
OK!


At each "? ", type in what you would expect the output to be.
Type exit() to quit
Unlocking tests for q03
=======================

Case 1
------
>>> env = create_global_frame()
>>> twos = Pair(2, Pair(2, nil))
>>> plus = PrimitiveProcedure(scheme_add) # + procedure
>>> scheme_apply(plus, twos, env)
Choose the number of the correct choice:
0) 4
1) SchemeError
? 0
OK!
-- Congratulations, you unlocked this case! --

Case 2
------
>>> env = create_global_frame()
>>> twos = Pair(2, Pair(2, nil))
>>> oddp = PrimitiveProcedure(scheme_oddp) # odd? procedure
>>> scheme_apply(oddp, twos, env)
Choose the number of the correct choice:
0) SchemeError
1) False
2) True
? 0
OK!
-- Congratulations, you unlocked this case! --

You are done unlocking tests for this question!



Unlocking tests for q06B
========================

Case 1
------
Q: What does the parameter vals look like?

Choose the number of the correct choice:
0)
          Pair(A, nil), where:
            A is the quoted expression

1)
          [A], where:
            A is the quoted expression

2)
          Pair('quote', Pair(A, nil)), where:
            A is the quoted expression

? 0
OK!
-- Congratulations, you unlocked this case! --

Case 2
------
>>> eval("(quote 3)")
Choose the number of the correct choice:
0) 3
1) Pair(3, nil)
2) Pair('quote', Pair(3, nil))
? 0
OK!

>>> eval("(quote (1 2))")

Choose the number of the correct choice:
0) Pair(1, Pair(2, nil))
1) SchemeError
2) Pair(1, 2)
3) Pair('quote', Pair(1, Pair(2, nil)))
? 0
OK!
>>> eval("(car '(1 2 3))")
? 1
OK!
>>> eval("(car (car '((1))))")
? 1
OK!
>>> eval("'hello")
Choose the number of the correct choice:
0) Pair('quote', Pair('hello', nil))
1) 'hello'
2) Pair('hello', nil)
? 1
OK!
>>> eval("''hello")


Choose the number of the correct choice:
0) Pair('hello', nil)
1) Pair('quote', Pair('hello', nil))
2) Pair('quote', Pair('quote', Pair('hello', nil)))
3) 'hello'
? 1
OK!
-- Congratulations, you unlocked this case! --

You are done unlocking tests for this question!


At each "? ", type in what you would expect the output to be.
Type exit() to quit
Unlocking tests for q07
=======================
tests
tests3
Case 1
------
>>> eval("(begin (+ 2 3) (+ 5 6))")
? 11
OK!
>>> eval("(begin (define x 3) x)")
? 3
OK!
-- Congratulations, you unlocked this case! --

Case 2
------
>>> eval("(begin 30 '(+ 2 2))")

Choose the number of the correct choice:
0) Pair('+', Pair(2, Pair(2, nil)))
1) 4
2) 30
3) Pair('quote', Pair(Pair('+', Pair(2, Pair(2, nil))), nil))
? 0
OK!
>>> eval('''
... (define x 0)
... (begin 42 (define x (+ x 1)))
... x
... ''')  # the last expression in do_begin_form should only be evaluated once
? 1
OK!
-- Congratulations, you unlocked this case! --

You are done unlocking tests for this question!


$ python3 ok -q 12 -u --local
You are running version v1.3.0 of ok.py
######################################
Unlocking tests for cal/61A/fa14/proj4
######################################

At each "? ", type in what you would expect the output to be.
Type exit() to quit
Unlocking tests for q12
=======================

Case 3
------
>>> eval('''
... (define (outer x y)
...   (define (inner z x)
...     (+ x (* y 2) (* z 3)))
...   (inner x 10))
... (outer 1 2)
... ''')
? 17
OK!
>>> eval('''
... (define (outer-func x y)
...    (define (inner z x)
...      (+ x (* y 2) (* z 3)))
...    inner)
... ((outer-func 1 2)  1 10)
... ''')
? 17
OK!
-- Congratulations, you unlocked this case! --

You are done unlocking tests for this question!

######################################
Unlocking tests for cal/61A/fa14/proj4
######################################

At each "? ", type in what you would expect the output to be.
Type exit() to quit
Unlocking tests for q14B
========================

Case 1
------
>>> eval("(and)")
Choose the number of the correct choice:
0) True
1) False
2) SchemeError
? 0
OK!
>>> eval("(and 1 #f)")
Choose the number of the correct choice:
0) 1
1) False
2) True
? 1
OK!
>>> eval("(and 2 1)")
Choose the number of the correct choice:
0) 1
1) 2
2) False
3) True
? 0
OK!
>>> eval("(and #f 5)")
Choose the number of the correct choice:
0) 5
1) True
2) False
? 2
OK!
>>> eval('''
... (define x 0)
... (and 3 (define x (+ x 1)))
... x
... ''')
? 1
OK!
>>> eval('''
... (define x 0)
... (and (begin (define x (+ x 1)) #f) 3)
... x
... ''')
? False
-- Not quite. Try again! --

? 3
-- Not quite. Try again! --

? 1
OK!
-- Congratulations, you unlocked this case! --

Case 3
------
>>> eval("(or)")
Choose the number of the correct choice:
0) False
1) SchemeError
2) True
? 0
OK!
>>> eval("(or 1)")

Choose the number of the correct choice:
0) True
1) SchemeError
2) 1
3) False
? 2
OK!
>>> eval("(or #f)")
Choose the number of the correct choice:
0) True
1) False
2) SchemeError
? 1
OK!
>>> eval("(or 0 1 2 'a)")
? 0
OK!
>>> eval('''
... (define x 0)
... (or (define x (+ x 1)) 3)
... x
... ''')
? 1
OK!
>>> eval('''
... (define x 0)
... (or #f (define x (+ x 1)))
... x
... ''')

? 1
OK!
-- Congratulations, you unlocked this case! --



Unlocking tests for q16
=======================

Case 1
------
>>> eval('''
... (let ((x 5))
...   (let ((x 2)
...         (y x))
...     (+ y (* x 2))))
... ''')
? 9
OK!
>>> eval("(let ((x 1) (y x)) y)")
Choose the number of the correct choice:
0) x
1) y
2) 1
3) SchemeError
? 3
OK!
-- Congratulations, you unlocked this case! --

You are done unlocking tests for this question!
